{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","appBackground","backgroundColor","minHeight","appBar","zIndex","drawer","drawerHeader","alignItems","padding","spacing","mixins","toolbar","justifyContent","content","flexGrow","cardPage","maxWidth","cardGenderMale","cardGenderFemale","cardGenderError","formPage","margin","formInput","width","App","classes","state","name","gender","className","AppBar","position","Toolbar","Typography","variant","noWrap","Container","Card","noValidate","autoComplete","CardContent","TextField","id","label","onChange","e","target","value","CardActions","Button","color","onClick","fetch","then","res","json","result","console","log","document","querySelector","style","error","CardHeader","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.dc17f349.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  appBackground: {\r\n    backgroundColor: \"#f5f5f5\",\r\n    minHeight: \"100vh\",\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n  },\r\n  drawerHeader: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    padding: theme.spacing(1, 2),\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: \"flex-end\",\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n\r\n  cardPage: {\r\n    maxWidth: 500,\r\n  },\r\n  cardGenderMale: {\r\n    display: \"none\",\r\n  },\r\n  cardGenderFemale: {\r\n    display: \"none\",\r\n  },\r\n  cardGenderError: {\r\n    display: \"none\",\r\n  },\r\n  formPage: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  formInput: {\r\n    width: \"100%\",\r\n  },\r\n}));\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const state = {\r\n    name: \"\",\r\n    gender: \"\",\r\n  };\r\n  const handleChangeForm = (e) => {\r\n    state.name = e.target.value;\r\n  };\r\n  const fetchGender = () => {\r\n    fetch(\"https://api.genderize.io/?name=\" + state.name)\r\n      .then((res) => res.json())\r\n      .then(\r\n        (result) => {\r\n          console.log(result);\r\n          state.gender = result.gender;\r\n          if (state.gender === \"female\") {\r\n            document.querySelector(\r\n              \".makeStyles-cardGenderFemale-8\"\r\n            ).style.display = \"block\";\r\n            document.querySelector(\r\n              \".makeStyles-cardGenderMale-7\"\r\n            ).style.display = \"none\";\r\n            document.querySelector(\r\n              \".makeStyles-cardGenderError-9\"\r\n            ).style.display = \"none\";\r\n          } else if (state.gender === \"male\") {\r\n            document.querySelector(\r\n              \".makeStyles-cardGenderMale-7\"\r\n            ).style.display = \"block\";\r\n            document.querySelector(\r\n              \".makeStyles-cardGenderFemale-8\"\r\n            ).style.display = \"none\";\r\n            document.querySelector(\r\n              \".makeStyles-cardGenderError-9\"\r\n            ).style.display = \"none\";\r\n          } else if (state.gender === null) {\r\n            document.querySelector(\r\n              \".makeStyles-cardGenderError-9\"\r\n            ).style.display = \"block\";\r\n            document.querySelector(\r\n              \".makeStyles-cardGenderFemale-8\"\r\n            ).style.display = \"none\";\r\n            document.querySelector(\r\n              \".makeStyles-cardGenderMale-7\"\r\n            ).style.display = \"none\";\r\n          }\r\n        },\r\n        // Примечание: важно обрабатывать ошибки именно здесь, а не в блоке catch(),\r\n        // чтобы не перехватывать исключения из ошибок в самих компонентах.\r\n        (error) => {}\r\n      );\r\n  };\r\n  return (\r\n    <div className={classes.appBackground}>\r\n      <AppBar position=\"fixed\" className={classes.appBar}>\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" noWrap>\r\n            Узнай пол по имени\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <main>\r\n        <div className={classes.drawerHeader} />\r\n        <Container>\r\n          <Card className={classes.cardPage}>\r\n            <form className={classes.formPage} noValidate autoComplete=\"off\">\r\n              <CardContent>\r\n                <TextField\r\n                  className={classes.formInput}\r\n                  id=\"filled-basic\"\r\n                  label=\"Введи свое транслитерированое имя (Латиницей)\"\r\n                  variant=\"filled\"\r\n                  onChange={handleChangeForm}\r\n                />\r\n              </CardContent>\r\n              <CardActions>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={fetchGender}\r\n                >\r\n                  Узнать пол\r\n                </Button>\r\n              </CardActions>\r\n            </form>\r\n          </Card>\r\n        </Container>\r\n        <div className={classes.drawerHeader} />\r\n        <Container className={classes.root}>\r\n          <Card className={classes.cardGenderMale}>\r\n            <CardContent>\r\n              <CardHeader title=\"Мужчина\" />\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card className={classes.cardGenderFemale}>\r\n            <CardContent>\r\n              <CardHeader title=\"Женщина\" />\r\n            </CardContent>\r\n          </Card>\r\n          <Card className={classes.cardGenderError}>\r\n            <CardContent>\r\n              <CardHeader title=\"Ошибка\" />\r\n            </CardContent>\r\n          </Card>\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}